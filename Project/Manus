Introduction:
Are you tired of watching horrible movies? 
"Clip"
Then listen up!
Our project is about analyzing enjoyable actor groups in movies. We want to predict which group of actors that from a hypothetical standpoint would give the best movie. 
Movies are a part of mainstream entertainment, but watching horrible movies is a waste of time. Grossing and rating are already indicators but choosing movie from peer sentiment rating (positivity of their reviews) can be more beneficial for pure enjoyment.



Data:
Now to the data!
"Clip"
We need a base of actors with their corresponding movies and reviews of the movies. 
Here IMDB provides the first part, where you can link the actors and the movies.
There are several review datasets (Amazon Movie Reviews, Large Movie Review Dataset 1, API extraction from The Movie DataBase) but we ended up selecting Large Movie Review Dataset 1 due to the simplicity of linking movies with their IMDB ID.
Both datasets are downloaded directly as .txt and .tsv files.

Our initial IMDB dataset is 30 million rows of actors paired with movies and is a total size of 1.3 GB. This data is far too large for networkx. However we only needed the movies where reviews where present and only the actors, not the producers, directors and so on. Of these rows, we only need the edges that actually are movies and not games and series, so with data clean up by only selecting actors/actresses from movies with reviews, the total size of the cleaned dataset ended up being 2.1 MB with 44000 rows. 


Graph:
Now to see how the actors are connected.
"Clip"
Our graph is a weighted undirected graph with actors as nodes and movies where both actors are present as actors as links. Inserting the data into networkx, the graph ends up having 17000 nodes and 55000 links.
If we plot the weighted degree distribution, we end up having a link distribution that looks exponential. If we compare it in loglog scale, we see that the distribution follows a power-law distribution for the larger hubs and a Poisson distribution for the less connected nodes, so the network is something in between random and scale-free.


Analysis:
And now,

"Clip"

The reviews are text based which we will analyze the sentiment of with a naive sentiment algorithm just as in the presented paper in class [Dodds, 2011]. We also want to run a community analysis to detect the groupings in the network. Finally, we combine them by giving a community the average sentiment of all the movies contained in the edges as a score.



Goal: 
What is this good for?
"Clip"
We want to look at the average sentiment of a community of actors. This way we get a set of collaborating actors that tend produce more enjoyable movies.


Outline:
What is our plan?
"Clip"
We need to
A) clean up the data to make it processable to a graph
B) analyze sentiment of reviews
C) add actors to a weighted graph where nodes are actors and edges are collaborations between actors (a movie)
D) give edges a sentiment score based on the average of the movies sentiment in that edge
E) find communities using infomap or louvains algorithm
F) make website look neat



